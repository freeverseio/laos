
//! Autogenerated weights for `pallet_asset_metadata_extender`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.1
//! DATE: 2024-12-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `giove`, CPU: `AMD Ryzen 7 5700G with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/laos
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_asset_metadata_extender
// --extrinsic=*
// --wasm-execution=compiled
// --output=./runtime/laos/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_asset_metadata_extender`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_asset_metadata_extender::WeightInfo for WeightInfo<T> {
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:0 w:1)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extend(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 21_860_000 picoseconds.
		Weight::from_parts(22_871_917, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 87
			.saturating_add(Weight::from_parts(1_730, 0).saturating_mul(t.into()))
			// Standard Error: 87
			.saturating_add(Weight::from_parts(12_362, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn precompile_update(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 17_461_000 picoseconds.
		Weight::from_parts(18_293_720, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 73
			.saturating_add(Weight::from_parts(1_656, 0).saturating_mul(t.into()))
			// Standard Error: 73
			.saturating_add(Weight::from_parts(10_330, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_balance_of(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3999`
		// Minimum execution time: 4_610_000 picoseconds.
		Weight::from_parts(5_460_327, 0)
			.saturating_add(Weight::from_parts(0, 3999))
			// Standard Error: 45
			.saturating_add(Weight::from_parts(2_217, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_claimer_by_index(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167 + u * (2 ±0)`
		//  Estimated: `4035`
		// Minimum execution time: 10_267_000 picoseconds.
		Weight::from_parts(11_387_499, 0)
			.saturating_add(Weight::from_parts(0, 4035))
			// Standard Error: 73
			.saturating_add(Weight::from_parts(13_448, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extension_by_index(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314 + u * (3 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 14_178_000 picoseconds.
		Weight::from_parts(15_562_813, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 106
			.saturating_add(Weight::from_parts(19_556, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extension_by_location_and_claimer(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `259 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 7_962_000 picoseconds.
		Weight::from_parts(8_864_169, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 56
			.saturating_add(Weight::from_parts(5_954, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_has_extension_by_claimer(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 5_169_000 picoseconds.
		Weight::from_parts(6_277_335, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 48
			.saturating_add(Weight::from_parts(2_212, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:0 w:1)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn create_token_uri_extension(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 17_251_000 picoseconds.
		Weight::from_parts(18_026_060, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 63
			.saturating_add(Weight::from_parts(968, 0).saturating_mul(t.into()))
			// Standard Error: 63
			.saturating_add(Weight::from_parts(9_067, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn update_token_uri_extension(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 13_130_000 picoseconds.
		Weight::from_parts(13_683_051, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 49
			.saturating_add(Weight::from_parts(570, 0).saturating_mul(t.into()))
			// Standard Error: 49
			.saturating_add(Weight::from_parts(7_107, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
