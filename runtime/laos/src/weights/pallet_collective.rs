
//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-08, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `titan`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/laos
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=1
// --pallet=pallet_collective
// --extrinsic=*
// --wasm-execution=compiled
// --output=./runtime/laos/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `Council::Members` (r:1 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:7 w:7)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 20]`.
	/// The range of component `n` is `[0, 20]`.
	/// The range of component `p` is `[0, 7]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (176 ±0) + p * (440 ±0)`
		//  Estimated: `1551 + m * (117 ±35) + p * (65536 ±101)`
		// Minimum execution time: 17_236_000 picoseconds.
		Weight::from_parts(17_236_000, 0)
			.saturating_add(Weight::from_parts(0, 1551))
			// Standard Error: 538_714
			.saturating_add(Weight::from_parts(984_342, 0).saturating_mul(m.into()))
			// Standard Error: 1_539_185
			.saturating_add(Weight::from_parts(2_823_406, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 117).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 65536).saturating_mul(p.into()))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 20]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66 + m * (20 ±0)`
		//  Estimated: `1552 + m * (20 ±0)`
		// Minimum execution time: 20_985_000 picoseconds.
		Weight::from_parts(49_331_530, 0)
			.saturating_add(Weight::from_parts(0, 1552))
			// Standard Error: 22_292
			.saturating_add(Weight::from_parts(14_892, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:0)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 20]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66 + m * (20 ±0)`
		//  Estimated: `3532 + m * (20 ±0)`
		// Minimum execution time: 51_170_000 picoseconds.
		Weight::from_parts(50_884_077, 0)
			.saturating_add(Weight::from_parts(0, 3532))
			// Standard Error: 1_224
			.saturating_add(Weight::from_parts(198, 0).saturating_mul(b.into()))
			// Standard Error: 65_863
			.saturating_add(Weight::from_parts(83_026, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 20]`.
	/// The range of component `p` is `[1, 7]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30 + m * (20 ±0) + p * (71 ±0)`
		//  Estimated: `3496 + m * (20 ±0) + p * (71 ±0)`
		// Minimum execution time: 58_757_000 picoseconds.
		Weight::from_parts(12_176_995, 0)
			.saturating_add(Weight::from_parts(0, 3496))
			// Standard Error: 40_337
			.saturating_add(Weight::from_parts(21_566, 0).saturating_mul(b.into()))
			// Standard Error: 2_290_257
			.saturating_add(Weight::from_parts(1_308_907, 0).saturating_mul(m.into()))
			// Standard Error: 6_870_772
			.saturating_add(Weight::from_parts(3_125_388, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 71).saturating_mul(p.into()))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 20]`.
	fn vote(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328 + m * (40 ±0)`
		//  Estimated: `4593`
		// Minimum execution time: 23_097_000 picoseconds.
		Weight::from_parts(25_093_000, 0)
			.saturating_add(Weight::from_parts(0, 4593))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:0 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 20]`.
	/// The range of component `p` is `[1, 7]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `176 + m * (40 ±0) + p * (55 ±0)`
		//  Estimated: `3642 + m * (40 ±0) + p * (55 ±0)`
		// Minimum execution time: 24_409_000 picoseconds.
		Weight::from_parts(26_028_750, 0)
			.saturating_add(Weight::from_parts(0, 3642))
			// Standard Error: 229_785
			.saturating_add(Weight::from_parts(991_500, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(p.into()))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 20]`.
	/// The range of component `p` is `[1, 7]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + m * (40 ±0) + p * (78 ±0)`
		//  Estimated: `3714 + b * (1 ±0) + m * (40 ±0) + p * (78 ±0)`
		// Minimum execution time: 50_532_000 picoseconds.
		Weight::from_parts(35_629_592, 0)
			.saturating_add(Weight::from_parts(0, 3714))
			// Standard Error: 14_617
			.saturating_add(Weight::from_parts(6_009, 0).saturating_mul(b.into()))
			// Standard Error: 933_690
			.saturating_add(Weight::from_parts(539_583, 0).saturating_mul(m.into()))
			// Standard Error: 2_489_840
			.saturating_add(Weight::from_parts(1_004_388, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 78).saturating_mul(p.into()))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:1 w:0)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:0 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 20]`.
	/// The range of component `p` is `[1, 7]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + m * (31 ±0) + p * (55 ±0)`
		//  Estimated: `3696 + m * (31 ±0) + p * (55 ±0)`
		// Minimum execution time: 37_864_000 picoseconds.
		Weight::from_parts(38_462_208, 0)
			.saturating_add(Weight::from_parts(0, 3696))
			// Standard Error: 67_405
			.saturating_add(Weight::from_parts(292_416, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 31).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(p.into()))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:1 w:0)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 20]`.
	/// The range of component `p` is `[1, 7]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267 + m * (40 ±0) + p * (78 ±0)`
		//  Estimated: `3733 + b * (1 ±0) + m * (40 ±0) + p * (78 ±0)`
		// Minimum execution time: 57_164_000 picoseconds.
		Weight::from_parts(197_987_852, 0)
			.saturating_add(Weight::from_parts(0, 3733))
			// Standard Error: 3_553
			.saturating_add(Weight::from_parts(490, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 78).saturating_mul(p.into()))
	}
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:0 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 7]`.
	fn disapprove_proposal(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `224 + p * (32 ±0)`
		//  Estimated: `1935`
		// Minimum execution time: 21_041_000 picoseconds.
		Weight::from_parts(24_164_000, 0)
			.saturating_add(Weight::from_parts(0, 1935))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
