
//! Autogenerated weights for `pallet_parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-20, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `titan`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/laos
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet-parachain-staking
// --extrinsic=*
// --steps
// 2
// --repeat
// 1
// --template=.maintain/frame-weight-template.hbs
// --json-file
// raw.json
// --output
// ./pallets/parachain-staking/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_parachain_staking`.
pub trait WeightInfo {
	fn set_staking_expectations() -> Weight;
	fn set_inflation() -> Weight;
	fn set_parachain_bond_account() -> Weight;
	fn set_parachain_bond_reserve_percent() -> Weight;
	fn set_total_selected() -> Weight;
	fn set_collator_commission() -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn join_candidates(x: u32, ) -> Weight;
	fn schedule_leave_candidates(x: u32, ) -> Weight;
	fn execute_leave_candidates_worst_case(x: u32, ) -> Weight;
	fn execute_leave_candidates_ideal(x: u32, y: u32, ) -> Weight;
	fn cancel_leave_candidates(x: u32, ) -> Weight;
	fn go_offline(x: u32, ) -> Weight;
	fn go_online(x: u32, ) -> Weight;
	fn candidate_bond_more(x: u32, ) -> Weight;
	fn schedule_candidate_bond_less() -> Weight;
	fn execute_candidate_bond_less(x: u32, ) -> Weight;
	fn set_candidate_bond_to_zero(x: u32, ) -> Weight;
	fn cancel_candidate_bond_less() -> Weight;
	fn delegate(x: u32, y: u32, ) -> Weight;
	fn schedule_revoke_delegation(x: u32, ) -> Weight;
	fn delegator_bond_more(x: u32, ) -> Weight;
	fn schedule_delegator_bond_less(x: u32, ) -> Weight;
	fn execute_revoke_delegation() -> Weight;
	fn execute_delegator_revoke_delegation_worst() -> Weight;
	fn execute_delegator_bond_less_worst() -> Weight;
	fn cancel_delegation_request(x: u32, ) -> Weight;
	fn prepare_staking_payouts() -> Weight;
	fn get_rewardable_delegators(y: u32, ) -> Weight;
	fn select_top_candidates(x: u32, y: u32, ) -> Weight;
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight;
	fn pay_one_collator_reward(y: u32, ) -> Weight;
	fn base_on_initialize() -> Weight;
	fn set_auto_compound(x: u32, y: u32, ) -> Weight;
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight;
	fn delegate_with_auto_compound_worst() -> Weight;
	fn mint_collator_reward() -> Weight;
	fn send_collator_rewards() -> Weight;
	fn notify_inactive_collator() -> Weight;
}

/// Weights for `pallet_parachain_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_staking_expectations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `1738`
		// Minimum execution time: 26_231_000 picoseconds.
		Weight::from_parts(26_231_000, 1738)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `1778`
		// Minimum execution time: 58_607_000 picoseconds.
		Weight::from_parts(58_607_000, 1778)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `1695`
		// Minimum execution time: 23_179_000 picoseconds.
		Weight::from_parts(23_179_000, 1695)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_reserve_percent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `1695`
		// Minimum execution time: 21_489_000 picoseconds.
		Weight::from_parts(21_489_000, 1695)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `1690`
		// Minimum execution time: 21_232_000 picoseconds.
		Weight::from_parts(21_232_000, 1690)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `192`
		//  Estimated: `1677`
		// Minimum execution time: 21_713_000 picoseconds.
		Weight::from_parts(21_713_000, 1677)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `1778`
		// Minimum execution time: 52_257_000 picoseconds.
		Weight::from_parts(52_257_000, 1778)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn join_candidates(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `500 + x * (44 ±0)`
		//  Estimated: `12767`
		// Minimum execution time: 82_353_000 picoseconds.
		Weight::from_parts(168_993_000, 12767)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn schedule_leave_candidates(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `466 + x * (39 ±0)`
		//  Estimated: `11842`
		// Minimum execution time: 47_288_000 picoseconds.
		Weight::from_parts(97_728_000, 11842)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:350 w:350)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:350 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates_worst_case(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688 + x * (431 ±0)`
		//  Estimated: `1317690`
		// Minimum execution time: 205_524_000 picoseconds.
		Weight::from_parts(21_041_392_000, 1317690)
			.saturating_add(T::DbWeight::get().reads(1406_u64))
			.saturating_add(T::DbWeight::get().writes(1055_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:350 w:350)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:350 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	/// The range of component `y` is `[2, 350]`.
	fn execute_leave_candidates_ideal(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `679 + x * (431 ±0)`
		//  Estimated: `5017 + x * (3762 ±0)`
		// Minimum execution time: 173_554_000 picoseconds.
		Weight::from_parts(5_905_686_637, 5017)
			// Standard Error: 1_961_761
			.saturating_add(Weight::from_parts(49_014_787, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn cancel_leave_candidates(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `393 + x * (39 ±0)`
		//  Estimated: `11770`
		// Minimum execution time: 33_307_000 picoseconds.
		Weight::from_parts(88_016_000, 11770)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_offline(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `430 + x * (40 ±0)`
		//  Estimated: `11901`
		// Minimum execution time: 31_031_000 picoseconds.
		Weight::from_parts(73_080_000, 11901)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_online(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391 + x * (40 ±0)`
		//  Estimated: `11865`
		// Minimum execution time: 30_451_000 picoseconds.
		Weight::from_parts(63_551_000, 11865)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn candidate_bond_more(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `568 + x * (46 ±0)`
		//  Estimated: `13267`
		// Minimum execution time: 72_782_000 picoseconds.
		Weight::from_parts(130_999_000, 13267)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `448`
		//  Estimated: `3913`
		// Minimum execution time: 35_007_000 picoseconds.
		Weight::from_parts(35_007_000, 3913)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn execute_candidate_bond_less(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `769 + x * (45 ±0)`
		//  Estimated: `13416`
		// Minimum execution time: 100_511_000 picoseconds.
		Weight::from_parts(140_033_000, 13416)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn set_candidate_bond_to_zero(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `672 + x * (45 ±0)`
		//  Estimated: `13319`
		// Minimum execution time: 67_280_000 picoseconds.
		Weight::from_parts(117_213_000, 13319)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `428`
		//  Estimated: `3893`
		// Minimum execution time: 23_974_000 picoseconds.
		Weight::from_parts(23_974_000, 3893)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn delegate(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1487 + x * (85 ±0) + y * (40 ±0)`
		//  Estimated: `4953 + x * (86 ±0) + y * (40 ±0)`
		// Minimum execution time: 178_967_000 picoseconds.
		Weight::from_parts(190_553_861, 4953)
			// Standard Error: 2_406
			.saturating_add(Weight::from_parts(67_909, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 86).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_revoke_delegation(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460 + x * (44 ±0)`
		//  Estimated: `19367`
		// Minimum execution time: 36_680_000 picoseconds.
		Weight::from_parts(93_261_000, 19367)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn delegator_bond_more(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `908 + x * (78 ±0)`
		//  Estimated: `31681`
		// Minimum execution time: 112_988_000 picoseconds.
		Weight::from_parts(239_663_000, 31681)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_delegator_bond_less(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460 + x * (44 ±0)`
		//  Estimated: `19367`
		// Minimum execution time: 41_542_000 picoseconds.
		Weight::from_parts(113_745_000, 19367)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1221`
		//  Estimated: `4752`
		// Minimum execution time: 155_598_000 picoseconds.
		Weight::from_parts(155_598_000, 4752)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_revoke_delegation_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37650`
		//  Estimated: `41115`
		// Minimum execution time: 282_619_000 picoseconds.
		Weight::from_parts(282_619_000, 41115)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30272`
		//  Estimated: `33737`
		// Minimum execution time: 231_916_000 picoseconds.
		Weight::from_parts(231_916_000, 33737)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn cancel_delegation_request(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `624 + x * (43 ±0)`
		//  Estimated: `19241`
		// Minimum execution time: 76_603_000 picoseconds.
		Weight::from_parts(107_229_000, 19241)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Staked` (r:1 w:1)
	/// Proof: `ParachainStaking::Staked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:0)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::RewardsAccount` (r:1 w:0)
	/// Proof: `ParachainStaking::RewardsAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelayedPayouts` (r:0 w:1)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn prepare_staking_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594`
		//  Estimated: `6172`
		// Minimum execution time: 44_473_000 picoseconds.
		Weight::from_parts(44_473_000, 6172)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 100]`.
	fn get_rewardable_delegators(_y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347 + y * (36 ±0)`
		//  Estimated: `7415`
		// Minimum execution time: 13_627_000 picoseconds.
		Weight::from_parts(26_725_000, 7415)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:50 w:0)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:50 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:50 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:50 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:0 w:50)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 50]`.
	/// The range of component `y` is `[0, 100]`.
	fn select_top_candidates(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (3824 ±0) + y * (1782 ±0)`
		//  Estimated: `3710 + x * (2759 ±1_234) + y * (1782 ±617)`
		// Minimum execution time: 18_865_000 picoseconds.
		Weight::from_parts(18_865_000, 3710)
			// Standard Error: 1_913_863
			.saturating_add(Weight::from_parts(23_282_940, 0).saturating_mul(x.into()))
			// Standard Error: 956_931
			.saturating_add(Weight::from_parts(1_095_910, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2759).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1782).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::RewardsAccount` (r:1 w:0)
	/// Proof: `ParachainStaking::RewardsAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:349 w:349)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:349 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 349]`.
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (398 ±0) + y * (272 ±0) + z * (41 ±0)`
		//  Estimated: `7 + x * (32768 ±263_257_024_168_307_916_800) + y * (273 ±0) + z * (41 ±35_018)`
		// Minimum execution time: 571_000 picoseconds.
		Weight::from_parts(571_000, 7)
			// Standard Error: 17_797_509
			.saturating_add(Weight::from_parts(113_288_755, 0).saturating_mul(x.into()))
			// Standard Error: 17_797_509
			.saturating_add(Weight::from_parts(47_626_021, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 32768).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 273).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(z.into()))
	}
	/// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:2 w:1)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:1 w:1)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:302 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardsAccount` (r:1 w:0)
	/// Proof: `ParachainStaking::RewardsAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(_y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `766 + y * (110 ±0)`
		//  Estimated: `783472`
		// Minimum execution time: 68_895_000 picoseconds.
		Weight::from_parts(2_813_301_000, 783472)
			.saturating_add(T::DbWeight::get().reads(309_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn base_on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347`
		//  Estimated: `1832`
		// Minimum execution time: 10_277_000 picoseconds.
		Weight::from_parts(10_277_000, 1832)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 300]`.
	/// The range of component `y` is `[0, 100]`.
	fn set_auto_compound(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `520 + x * (24 ±0) + y * (35 ±0)`
		//  Estimated: `3985 + x * (24 ±0) + y * (36 ±0)`
		// Minimum execution time: 73_343_000 picoseconds.
		Weight::from_parts(60_614_000, 3985)
			// Standard Error: 5_548
			.saturating_add(Weight::from_parts(50_253, 0).saturating_mul(x.into()))
			// Standard Error: 16_645
			.saturating_add(Weight::from_parts(127_290, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 24).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 350]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 99]`.
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (60 ±0) + y * (21 ±0) + z * (91 ±0)`
		//  Estimated: `14226 + x * (61 ±10) + y * (21 ±10) + z * (91 ±38)`
		// Minimum execution time: 162_889_000 picoseconds.
		Weight::from_parts(97_552_333, 14226)
			// Standard Error: 43_352
			.saturating_add(Weight::from_parts(266_169, 0).saturating_mul(x.into()))
			// Standard Error: 43_476
			.saturating_add(Weight::from_parts(66_763, 0).saturating_mul(y.into()))
			// Standard Error: 153_265
			.saturating_add(Weight::from_parts(424_609, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 61).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 91).saturating_mul(z.into()))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:2 w:2)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:2 w:2)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:2 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn delegate_with_auto_compound_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `48446`
		//  Estimated: `54386`
		// Minimum execution time: 407_805_000 picoseconds.
		Weight::from_parts(407_805_000, 54386)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn mint_collator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `91`
		//  Estimated: `3581`
		// Minimum execution time: 32_273_000 picoseconds.
		Weight::from_parts(32_273_000, 3581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardsAccount` (r:1 w:0)
	/// Proof: `ParachainStaking::RewardsAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn send_collator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `463`
		//  Estimated: `6172`
		// Minimum execution time: 82_863_000 picoseconds.
		Weight::from_parts(82_863_000, 6172)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::EnableMarkingOffline` (r:1 w:0)
	/// Proof: `ParachainStaking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:1 w:0)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:1 w:0)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn notify_inactive_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `11709`
		//  Estimated: `15174`
		// Minimum execution time: 129_187_000 picoseconds.
		Weight::from_parts(129_187_000, 15174)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_staking_expectations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `1738`
		// Minimum execution time: 26_231_000 picoseconds.
		Weight::from_parts(26_231_000, 1738)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `1778`
		// Minimum execution time: 58_607_000 picoseconds.
		Weight::from_parts(58_607_000, 1778)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `1695`
		// Minimum execution time: 23_179_000 picoseconds.
		Weight::from_parts(23_179_000, 1695)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_reserve_percent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `1695`
		// Minimum execution time: 21_489_000 picoseconds.
		Weight::from_parts(21_489_000, 1695)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `1690`
		// Minimum execution time: 21_232_000 picoseconds.
		Weight::from_parts(21_232_000, 1690)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `192`
		//  Estimated: `1677`
		// Minimum execution time: 21_713_000 picoseconds.
		Weight::from_parts(21_713_000, 1677)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `1778`
		// Minimum execution time: 52_257_000 picoseconds.
		Weight::from_parts(52_257_000, 1778)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn join_candidates(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `500 + x * (44 ±0)`
		//  Estimated: `12767`
		// Minimum execution time: 82_353_000 picoseconds.
		Weight::from_parts(168_993_000, 12767)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn schedule_leave_candidates(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `466 + x * (39 ±0)`
		//  Estimated: `11842`
		// Minimum execution time: 47_288_000 picoseconds.
		Weight::from_parts(97_728_000, 11842)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:350 w:350)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:350 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates_worst_case(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688 + x * (431 ±0)`
		//  Estimated: `1317690`
		// Minimum execution time: 205_524_000 picoseconds.
		Weight::from_parts(21_041_392_000, 1317690)
			.saturating_add(RocksDbWeight::get().reads(1406_u64))
			.saturating_add(RocksDbWeight::get().writes(1055_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:350 w:350)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:350 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	/// The range of component `y` is `[2, 350]`.
	fn execute_leave_candidates_ideal(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `679 + x * (431 ±0)`
		//  Estimated: `5017 + x * (3762 ±0)`
		// Minimum execution time: 173_554_000 picoseconds.
		Weight::from_parts(5_905_686_637, 5017)
			// Standard Error: 1_961_761
			.saturating_add(Weight::from_parts(49_014_787, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn cancel_leave_candidates(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `393 + x * (39 ±0)`
		//  Estimated: `11770`
		// Minimum execution time: 33_307_000 picoseconds.
		Weight::from_parts(88_016_000, 11770)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_offline(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `430 + x * (40 ±0)`
		//  Estimated: `11901`
		// Minimum execution time: 31_031_000 picoseconds.
		Weight::from_parts(73_080_000, 11901)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_online(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391 + x * (40 ±0)`
		//  Estimated: `11865`
		// Minimum execution time: 30_451_000 picoseconds.
		Weight::from_parts(63_551_000, 11865)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn candidate_bond_more(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `568 + x * (46 ±0)`
		//  Estimated: `13267`
		// Minimum execution time: 72_782_000 picoseconds.
		Weight::from_parts(130_999_000, 13267)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `448`
		//  Estimated: `3913`
		// Minimum execution time: 35_007_000 picoseconds.
		Weight::from_parts(35_007_000, 3913)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn execute_candidate_bond_less(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `769 + x * (45 ±0)`
		//  Estimated: `13416`
		// Minimum execution time: 100_511_000 picoseconds.
		Weight::from_parts(140_033_000, 13416)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn set_candidate_bond_to_zero(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `672 + x * (45 ±0)`
		//  Estimated: `13319`
		// Minimum execution time: 67_280_000 picoseconds.
		Weight::from_parts(117_213_000, 13319)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `428`
		//  Estimated: `3893`
		// Minimum execution time: 23_974_000 picoseconds.
		Weight::from_parts(23_974_000, 3893)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn delegate(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1487 + x * (85 ±0) + y * (40 ±0)`
		//  Estimated: `4953 + x * (86 ±0) + y * (40 ±0)`
		// Minimum execution time: 178_967_000 picoseconds.
		Weight::from_parts(190_553_861, 4953)
			// Standard Error: 2_406
			.saturating_add(Weight::from_parts(67_909, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 86).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_revoke_delegation(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460 + x * (44 ±0)`
		//  Estimated: `19367`
		// Minimum execution time: 36_680_000 picoseconds.
		Weight::from_parts(93_261_000, 19367)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn delegator_bond_more(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `908 + x * (78 ±0)`
		//  Estimated: `31681`
		// Minimum execution time: 112_988_000 picoseconds.
		Weight::from_parts(239_663_000, 31681)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_delegator_bond_less(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460 + x * (44 ±0)`
		//  Estimated: `19367`
		// Minimum execution time: 41_542_000 picoseconds.
		Weight::from_parts(113_745_000, 19367)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1221`
		//  Estimated: `4752`
		// Minimum execution time: 155_598_000 picoseconds.
		Weight::from_parts(155_598_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_revoke_delegation_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37650`
		//  Estimated: `41115`
		// Minimum execution time: 282_619_000 picoseconds.
		Weight::from_parts(282_619_000, 41115)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30272`
		//  Estimated: `33737`
		// Minimum execution time: 231_916_000 picoseconds.
		Weight::from_parts(231_916_000, 33737)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn cancel_delegation_request(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `624 + x * (43 ±0)`
		//  Estimated: `19241`
		// Minimum execution time: 76_603_000 picoseconds.
		Weight::from_parts(107_229_000, 19241)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Staked` (r:1 w:1)
	/// Proof: `ParachainStaking::Staked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:0)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::RewardsAccount` (r:1 w:0)
	/// Proof: `ParachainStaking::RewardsAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelayedPayouts` (r:0 w:1)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn prepare_staking_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594`
		//  Estimated: `6172`
		// Minimum execution time: 44_473_000 picoseconds.
		Weight::from_parts(44_473_000, 6172)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 100]`.
	fn get_rewardable_delegators(_y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347 + y * (36 ±0)`
		//  Estimated: `7415`
		// Minimum execution time: 13_627_000 picoseconds.
		Weight::from_parts(26_725_000, 7415)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:50 w:0)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:50 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:50 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:50 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:0 w:50)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 50]`.
	/// The range of component `y` is `[0, 100]`.
	fn select_top_candidates(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (3824 ±0) + y * (1782 ±0)`
		//  Estimated: `3710 + x * (2759 ±1_234) + y * (1782 ±617)`
		// Minimum execution time: 18_865_000 picoseconds.
		Weight::from_parts(18_865_000, 3710)
			// Standard Error: 1_913_863
			.saturating_add(Weight::from_parts(23_282_940, 0).saturating_mul(x.into()))
			// Standard Error: 956_931
			.saturating_add(Weight::from_parts(1_095_910, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2759).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1782).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::RewardsAccount` (r:1 w:0)
	/// Proof: `ParachainStaking::RewardsAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:349 w:349)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:349 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 349]`.
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (398 ±0) + y * (272 ±0) + z * (41 ±0)`
		//  Estimated: `7 + x * (32768 ±263_257_024_168_307_916_800) + y * (273 ±0) + z * (41 ±35_018)`
		// Minimum execution time: 571_000 picoseconds.
		Weight::from_parts(571_000, 7)
			// Standard Error: 17_797_509
			.saturating_add(Weight::from_parts(113_288_755, 0).saturating_mul(x.into()))
			// Standard Error: 17_797_509
			.saturating_add(Weight::from_parts(47_626_021, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 32768).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 273).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(z.into()))
	}
	/// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:2 w:1)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:1 w:1)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:302 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardsAccount` (r:1 w:0)
	/// Proof: `ParachainStaking::RewardsAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(_y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `766 + y * (110 ±0)`
		//  Estimated: `783472`
		// Minimum execution time: 68_895_000 picoseconds.
		Weight::from_parts(2_813_301_000, 783472)
			.saturating_add(RocksDbWeight::get().reads(309_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn base_on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347`
		//  Estimated: `1832`
		// Minimum execution time: 10_277_000 picoseconds.
		Weight::from_parts(10_277_000, 1832)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 300]`.
	/// The range of component `y` is `[0, 100]`.
	fn set_auto_compound(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `520 + x * (24 ±0) + y * (35 ±0)`
		//  Estimated: `3985 + x * (24 ±0) + y * (36 ±0)`
		// Minimum execution time: 73_343_000 picoseconds.
		Weight::from_parts(60_614_000, 3985)
			// Standard Error: 5_548
			.saturating_add(Weight::from_parts(50_253, 0).saturating_mul(x.into()))
			// Standard Error: 16_645
			.saturating_add(Weight::from_parts(127_290, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 24).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 350]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 99]`.
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (60 ±0) + y * (21 ±0) + z * (91 ±0)`
		//  Estimated: `14226 + x * (61 ±10) + y * (21 ±10) + z * (91 ±38)`
		// Minimum execution time: 162_889_000 picoseconds.
		Weight::from_parts(97_552_333, 14226)
			// Standard Error: 43_352
			.saturating_add(Weight::from_parts(266_169, 0).saturating_mul(x.into()))
			// Standard Error: 43_476
			.saturating_add(Weight::from_parts(66_763, 0).saturating_mul(y.into()))
			// Standard Error: 153_265
			.saturating_add(Weight::from_parts(424_609, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 61).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 91).saturating_mul(z.into()))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:2 w:2)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:2 w:2)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:2 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn delegate_with_auto_compound_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `48446`
		//  Estimated: `54386`
		// Minimum execution time: 407_805_000 picoseconds.
		Weight::from_parts(407_805_000, 54386)
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn mint_collator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `91`
		//  Estimated: `3581`
		// Minimum execution time: 32_273_000 picoseconds.
		Weight::from_parts(32_273_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::RewardsAccount` (r:1 w:0)
	/// Proof: `ParachainStaking::RewardsAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn send_collator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `463`
		//  Estimated: `6172`
		// Minimum execution time: 82_863_000 picoseconds.
		Weight::from_parts(82_863_000, 6172)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::EnableMarkingOffline` (r:1 w:0)
	/// Proof: `ParachainStaking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:1 w:0)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:1 w:0)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn notify_inactive_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `11709`
		//  Estimated: `15174`
		// Minimum execution time: 129_187_000 picoseconds.
		Weight::from_parts(129_187_000, 15174)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}