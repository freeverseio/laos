name: ChatGPT

on:
  pull_request:
    types:
      - opened
      - synchronize
  workflow_dispatch:
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check Conditions
        id: check
        uses: actions/github-script@v3
        with:
          script: |
            // Fetch the latest commit message associated with this PR
            const commits = await github.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            const latestCommitMessage = commits.data[commits.data.length - 1].commit.message;
            console.log(`Latest Commit Message: ${latestCommitMessage}`);

            // Fetch the PR creator
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            const prCreator = pr.data.user.login;

            // Check if the PR creator is in the group
            const isInGroup = await github.teams.getMembershipInOrg({
              org: 'freeverseio',
              team_slug: 'ziggy',
              username: prCreator,
            });
            console.log(`Commenter is ${isInGroup.status === 200 ? '' : 'not '}in the group.`);

            // Check if the latest commit message contains [autoreview]
            const isAutoReview = latestCommitMessage.includes('[autoreview]');
            console.log(`is_autoreview=${isAutoReview}`);

            // Set outputs
            return {
              is_in_group: isInGroup.status === 200,
              is_autoreview: isAutoReview,
              is_draft: pr.data.draft,
            };

      - name: Run if Draft, Correct User, and AutoReview
        if: env.is_draft == 'true' && env.is_in_group == 'true' && env.is_autoreview == 'true'
        uses: gvasilei/AutoReviewer@0.4
        env:
          NODE_OPTIONS: '--experimental-fetch'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          model_name: gpt-4
