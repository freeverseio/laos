name: ChatGPT

on:
  issue_comment:
    types:
      - created
  
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check Conditions
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Determine if this is a draft PR
          PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }})
          IS_DRAFT=$(echo "$PR_INFO" | jq -r '.draft')
          PRCREATOR=$(echo "$PR_INFO" | jq -r '.user.login')

          # Exit early if this is not a draft PR
          if [[ "$IS_DRAFT" != "true" ]]; then
            echo "This is not a draft PR."
            echo "is_draft=false" >> $GITHUB_ENV
            echo "is_in_group=false" >> $GITHUB_ENV
            echo "is_autoreview=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "is_draft=true" >> $GITHUB_ENV

          # Check if the PR creator is in the group
          IS_IN_GROUP=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/orgs/freeverseio/teams/ziggy/members/$PRCREATOR)
          if [ "$IS_IN_GROUP" != "null" ]; then
            echo "Commenter is in the group."
            echo "is_in_group=true" >> $GITHUB_ENV
          else
            echo "Commenter is not in the group."
            echo "is_in_group=false" >> $GITHUB_ENV
          fi

          # Check if the comment contains [autoreview]
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "is_autoreview=$(if [[ "$COMMENT_BODY" == *"[autoreview]"* ]]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_ENV

      - name: Run if Draft, Correct User, and AutoReview
        if: env.is_draft == 'true' && env.is_in_group == 'true' && env.is_autoreview == 'true'
        uses: gvasilei/AutoReviewer@0.4
        env:
          NODE_OPTIONS: '--experimental-fetch'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          model_name: gpt-4
