name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check_version.outputs.proceed }}
    steps:
      - uses: actions/checkout@v4.1.1
      - id: check_version
        run: |
          VERSION=$(grep -m1 version Cargo.toml | sed -E 's/.*"(.*)".*/\1/')
          if [ "v$VERSION" == "${{ github.ref_name }}" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "Version in Cargo.toml ($VERSION) does not match current tag ${{ github.ref_name }}. Canceling release..."
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

  dockerize:
    needs: check-version
    if: needs.check-version.outputs.proceed == 'true'
    runs-on: 
      group: laos
      labels: ubuntu-16-cores
    strategy:
      matrix:
        chain: ["laos-ownership"]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
      - uses: ./.github/actions/cache
        with:
          cache-key: build_and_push
      - name: Srtool build
        id: srtool_build
        uses: chevdor/srtool-actions@v0.8.0
        with:
          chain: ${{ matrix.chain }}
          runtime_dir: ownership-chain/runtime
      - name: Summary
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq . > ${{ matrix.chain }}-srtool-digest.json
          cat ${{ matrix.chain }}-srtool-digest.json
          echo "Runtime location: ${{ steps.srtool_build.outputs.wasm }}"
      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push image ownership node
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: ./docker/ownership-node.local.Dockerfile
          tags: freeverseio/laos-ownership-node:${{ github.ref_name }}
      - name: Extract Release Info
        id: extract_info
        run: |
          RUNTIME_SIZE_BYTES=$(jq '.runtimes.compact.size' < ${{ matrix.chain }}-srtool-digest.json)
          RUNTIME_SIZE_MB=$(echo "scale=3; $RUNTIME_SIZE_BYTES / 1024 / 1024" | bc)
          COMPRESSED=$(jq '.runtimes.compact.compression.compressed' < ${{ matrix.chain }}-srtool-digest.json)
          COMPRESSED_PERCENTAGE=$(echo "scale=2; ($RUNTIME_SIZE_BYTES / $(jq '.runtimes.compact.compression.size_decompressed' < ${{ matrix.chain }}-srtool-digest.json)) * 100" | bc)
          METADATA_VERSION=$(jq '.info.metadata_version' < ${{ matrix.chain }}-srtool-digest.json)
          CORE_VERSION=$(jq '.info.core_version.specName' < ${{ matrix.chain }}-srtool-digest.json)
          SYSTEM_SET_CODE_HASH=$(jq '.runtimes.compact.prop' < ${{ matrix.chain }}-srtool-digest.json)
          AUTHORIZE_UPGRADE_HASH=$(jq '.runtimes.compact.authorize_upgrade_prop' < ${{ matrix.chain }}-srtool-digest.json)
          BLAKE2_256_HASH=$(jq '.runtimes.compact.blake2_256' < ${{ matrix.chain }}-srtool-digest.json)
          IPFS_HASH=$(jq '.runtimes.compact.ipfs' < ${{ matrix.chain }}-srtool-digest.json)
          RUSTC_VERSION=$(jq '.info.rustc' < ${{ matrix.chain }}-srtool-digest.json)
          SRTOOL_VERSION=$(jq '.info.generator.version' < ${{ matrix.chain }}-srtool-digest.json)
          
          echo "runtime_size_mb=$RUNTIME_SIZE_MB" >> $GITHUB_OUTPUT
          echo "compressed=$COMPRESSED" >> $GITHUB_OUTPUT
          echo "compressed_percentage=$COMPRESSED_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "metadata_version=$METADATA_VERSION" >> $GITHUB_OUTPUT
          echo "core_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "system_set_code_hash=$SYSTEM_SET_CODE_HASH" >> $GITHUB_OUTPUT
          echo "authorize_upgrade_hash=$AUTHORIZE_UPGRADE_HASH" >> $GITHUB_OUTPUT
          echo "blake2_256_hash=$BLAKE2_256_HASH" >> $GITHUB_OUTPUT
          echo "ipfs_hash=$IPFS_HASH" >> $GITHUB_OUTPUT
          echo "rustc_version=$RUSTC_VERSION" >> $GITHUB_OUTPUT
          echo "srtool_version=$SRTOOL_VERSION" >> $GITHUB_OUTPUT
      - name: Update Release Description with Extracted Info
        run: |
          # Construye la nueva descripci√≥n utilizando la informaci√≥n extra√≠da
          NEW_DESC="

          ## Runtime info
          This runtime was built using ${{ steps.extract_info.outputs.rustc_version }} with srtool ${{ steps.extract_info.outputs.srtool_version }}

          # LAOS
          \`\`\`üèãÔ∏è Runtime size: ${{ steps.extract_info.outputs.runtime_size_mb }} MB
          üóú Compressed: ${{ steps.extract_info.outputs.compressed }}
          ‚ú® Compression Percentage: ${{ steps.extract_info.outputs.compressed_percentage }}%
          üéÅ Metadata version: V${{ steps.extract_info.outputs.metadata_version }}
          üî• Core version: ${{ steps.extract_info.outputs.core_version }}
          üó≥Ô∏è system.setCode hash: ${{ steps.extract_info.outputs.system_set_code_hash }}
          üó≥Ô∏è authorizeUpgrade hash: ${{ steps.extract_info.outputs.authorize_upgrade_hash }}
          üó≥Ô∏è Blake2-256 hash: ${{ steps.extract_info.outputs.blake2_256_hash }}
          üì¶ IPFS: https://www.ipfs.io/ipfs/${{ steps.extract_info.outputs.ipfs_hash }}"
      
          # Obt√©n la descripci√≥n actual de la release (opcional, si quieres a√±adir en vez de reemplazar)
          CURRENT_DESC=$(gh release view ${{ github.ref_name }} --json body -q .body)
      
          # Combina la descripci√≥n actual con la nueva informaci√≥n (opcional)
          COMBINED_DESC="$CURRENT_DESC$NEW_DESC"
      
          # Actualiza la release con la nueva descripci√≥n
          echo "$COMBINED_DESC" | gh release edit ${{ github.ref_name }} --notes-file -
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Ownership Wasm Binaries
        run: |
            echo "Uploading ownership wasm binary for release ${{ github.ref_name }}"
            gh release upload ${{ github.ref_name }} ${{ steps.srtool_build.outputs.wasm }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}